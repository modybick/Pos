package com.example.pos.ui.sale

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Clear
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.pos.utils.NumberCommaTransformation
import com.example.pos.utils.toCurrencyFormat
import androidx.compose.runtime.remember

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CheckoutScreen(
    saleViewModel: SaleViewModel,
    onNavigateBack: () -> Unit
) {
    val uiState by saleViewModel.uiState.collectAsState()
    var tenderedAmount by remember { mutableStateOf("") } // È†ê„Åã„ÇäÈáëÈ°ç„ÅÆÂÖ•Âäõ

    val tendered = tenderedAmount.toIntOrNull() ?: 0
    val change = tendered - uiState.totalAmount // „ÅäÈá£„Çä

    val totalItemCount = uiState.cartItems.sumOf { it.quantity } // ÂïÜÂìÅÁÇπÊï∞„ÇíË®àÁÆó

    // „Ç´„Éº„Éà„ÅÆ„Ç¢„Ç§„ÉÜ„É†„Çí‰∏¶„Å≥Êõø„Åà
    val sortedCartItems = remember(uiState.cartItems) {
        uiState.cartItems.sortedBy { it.product.barcode }
    }

    Scaffold(
        topBar = { TopAppBar(title = { Text("‰ºöË®à") }) }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(16.dp)
        ) {
            // --- ÂïÜÂìÅ„É™„Çπ„ÉàÔºàÁ¢∫Ë™çÁî®Ôºâ ---
            Text("‰ºöË®àÂÜÖÂÆπ", style = MaterialTheme.typography.titleMedium)
            Spacer(modifier = Modifier.height(8.dp))
            // --- „Éò„ÉÉ„ÉÄ„ÉºË°å ---
            Row(modifier = Modifier.fillMaxWidth()) {
                Text(
                    text = "ÂïÜÂìÅÂêç",
                    modifier = Modifier.weight(0.5f), // ÊØîÁéá 50%
                    style = MaterialTheme.typography.bodySmall
                )
                Text(
                    text = "Êï∞Èáè",
                    modifier = Modifier.weight(0.2f), // ÊØîÁéá 20%
                    textAlign = TextAlign.Center,
                    style = MaterialTheme.typography.bodySmall
                )
                Text(
                    text = "ÈáëÈ°ç",
                    modifier = Modifier.weight(0.3f), // ÊØîÁéá 30%
                    textAlign = TextAlign.End,
                    style = MaterialTheme.typography.bodySmall
                )
            }
            HorizontalDivider()
            // --- ÂïÜÂìÅ„É™„Çπ„ÉàÔºàÁ¢∫Ë™çÁî®Ôºâ ---
            LazyColumn(modifier = Modifier.weight(1f)) {
                items(sortedCartItems) { item ->
                    // üëá ÂêÑ„Éá„Éº„ÇøË°å
                    Row(
                        modifier = Modifier.padding(vertical = 8.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        // ÂïÜÂìÅÂêç
                        Text(
                            text = item.product.name,
                            modifier = Modifier.weight(0.5f) // „Éò„ÉÉ„ÉÄ„Éº„Å®Âêå„ÅòÊØîÁéá
                        )
                        // Êï∞Èáè
                        Text(
                            text = item.quantity.toString(),
                            modifier = Modifier.weight(0.2f),
                            textAlign = TextAlign.Center
                        )
                        // ÈáëÈ°ç
                        Text(
                            text = "${(item.product.price * item.quantity).toCurrencyFormat()}ÂÜÜ",
                            modifier = Modifier.weight(0.3f),
                            textAlign = TextAlign.End
                        )
                    }
                }
            }
            HorizontalDivider(modifier = Modifier.padding(vertical = 16.dp))

            // --- ÈáëÈ°çË°®Á§∫ ---
            AmountRow(label = "ÂêàË®àÈáëÈ°çÔºà${totalItemCount}ÁÇπÔºâ", amount = uiState.totalAmount)
            Spacer(modifier = Modifier.height(8.dp))

            // --- È†ê„Åã„ÇäÈáëÈ°çÂÖ•Âäõ ---
            Row(
                verticalAlignment = Alignment.Bottom,
                modifier = Modifier.fillMaxWidth()
            ) {
                // ÂêåÈ°ç„Éú„Çø„É≥
                Button(
                    onClick = { tenderedAmount = uiState.totalAmount.toString() },
                    modifier = Modifier.height(48.dp)
                ) {
                    Text("ÂêåÈ°ç")
                }
                Spacer(modifier = Modifier.width(8.dp))
                // ÂÖ•ÂäõÊ¨Ñ
                OutlinedTextField(
                    value = tenderedAmount,
                    onValueChange = { tenderedAmount = it.filter { char -> char.isDigit() } },
                    label = { Text("È†ê„Åã„ÇäÈáëÈ°ç") },
                    visualTransformation = NumberCommaTransformation(),
                    suffix = {},
                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                    modifier = Modifier.weight(1f),
                    textStyle = LocalTextStyle.current.copy(
                        fontSize = 28.sp,
                        textAlign = TextAlign.End
                    ),
                    leadingIcon = {
                        if (tenderedAmount.isNotEmpty()) {
                            IconButton(onClick = { tenderedAmount = "" }) {
                                Icon(
                                    imageVector = Icons.Default.Clear,
                                    contentDescription = "ÂÖ•Âäõ„ÇØ„É™„Ç¢"
                                )
                            }
                        }
                    }
                )
                // Âçò‰Ωç
                Text(
                    text = " ÂÜÜ",
                    style = MaterialTheme.typography.headlineLarge,
                    color = MaterialTheme.colorScheme.primary
                )
            }
            Spacer(modifier = Modifier.height(16.dp))

            // --- „ÅäÈá£„ÇäË°®Á§∫ ---
            AmountRow(label = "„ÅäÈá£„Çä", amount = if (change > 0) change else 0)

            Spacer(modifier = Modifier.height(24.dp))

            Row(
                verticalAlignment = Alignment.Bottom,
                modifier = Modifier.fillMaxWidth()
            ) {
                // --- PayPay ---
                Button(
                    onClick = {
                        saleViewModel.finalizeSale(tendered, "PayPay")
                        onNavigateBack() // „É¨„Ç∏ÁîªÈù¢„Å´Êàª„Çã
                    },
                    // È†ê„Åã„ÇäÈáëÈ°ç„ÅåÂêàË®à‰ª•‰∏ä„ÅÆÂ†¥Âêà„ÅÆ„ÅøÊúâÂäπ
                    enabled = tendered >= uiState.totalAmount,
                    modifier = Modifier.weight(1f).height(48.dp),

                ) {
                    Text("PayPay")
                }
                Spacer(modifier = Modifier.width(16.dp))
                // --- ÁèæÈáë ---
                Button(
                    onClick = {
                        saleViewModel.finalizeSale(tendered, "ÁèæÈáë")
                        onNavigateBack() // „É¨„Ç∏ÁîªÈù¢„Å´Êàª„Çã
                    },
                    // È†ê„Åã„ÇäÈáëÈ°ç„ÅåÂêàË®à‰ª•‰∏ä„ÅÆÂ†¥Âêà„ÅÆ„ÅøÊúâÂäπ
                    enabled = tendered >= uiState.totalAmount,
                    modifier = Modifier.weight(1f).height(48.dp)
                ) {
                    Text("ÁèæÈáë")
                }
            }
        }
    }
}

@Composable
private fun AmountRow(label: String, amount: Int) {
    Row(verticalAlignment = Alignment.CenterVertically) {
        Text(label, style = MaterialTheme.typography.titleMedium, modifier = Modifier.weight(1f))
        Text(
            "${amount.toCurrencyFormat()} ÂÜÜ",
            style = MaterialTheme.typography.headlineLarge,
            textAlign = TextAlign.End,
            color = MaterialTheme.colorScheme.primary
        )
    }
}